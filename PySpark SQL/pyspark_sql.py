# -*- coding: utf-8 -*-
"""PySpark SQL

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qVtskcMd27OTEo71748a4mqENXuAeHmc
"""

!pip install pyspark

import pyspark
from pyspark.sql import SparkSession
spark = SparkSession.builder.master("local[*]").getOrCreate()

"""#1 Spark SQL - Consultas e Seleções"""

df = spark.sql('''select 'ok' as Status''')
df.show()

"""#2 Importing Data"""

#Gerado com base em python
df = spark.read.csv("/content/cereal.csv", sep = ",", inferSchema = True, header = True)
df.show()

"""#3 Manipulation Data with Spark SQL"""

df.createOrReplaceTempView("cereal")

#Gerado com base em SQL
cereal = spark.sql('''select * from cereal''')
cereal.show()

#filtro com Pyspark SQL
cereal = spark.sql('''select * from cereal where type = 'C' ''')
cereal.show()

df1 = df.where(df["type"]== "C")
df1.show()

cereal = spark.sql('''select count(*) as total from cereal where mfr = 'G' ''')
cereal.show()

df.where(df["mfr"] == "G").count()

"""#4 Select no PySpark SQL"""

df.printSchema()

df.createOrReplaceTempView("cereal")

cereal = spark.sql('''select name, type, mfr from cereal ''')
cereal.show()

"""#5 Exclusão de valores repetidos, deixando apenas valores únicos"""

cereal = spark.sql('''select type, mfr from cereal ''')
cereal.show()

cereal = spark.sql('''select type, mfr from cereal ''')
cereal.count()

cereal = spark.sql('''select distinct type, mfr from cereal ''')
cereal.show()

cereal = spark.sql('''select distinct type, mfr from cereal ''')
cereal.count()

"""#6 Where no Spark SQL (filtro)"""

cereal = spark.sql('''select * from cereal where mfr = "N" ''')
cereal.count()

cereal = spark.sql('''select * from cereal where mfr = "K" and calories >= 100  ''')
cereal.count()

cereal = spark.sql('''select * from cereal where mfr = "K" and calories >= 100  ''')
cereal.show()

"""#7 Group By"""

cereal = spark.sql('''SELECT mfr, type, COUNT(*) FROM cereal GROUP BY mfr, type  ''')
cereal.count()

cereal = spark.sql('''SELECT mfr, type, COUNT(*) AS total FROM cereal GROUP BY mfr, type  ''')
cereal.show()

cereal = spark.sql('''SELECT mfr, type, COUNT(*) AS total, SUM(calories) as Total_calories FROM cereal GROUP BY mfr, type  ''')
cereal.show()

cereal = spark.sql('''SELECT mfr, type, COUNT(*) AS total, SUM(calories) as Total_calories FROM cereal GROUP BY mfr, type  ''')
cereal.count()

#organizando a estrutura de uma forma mais legivel
cereal = spark.sql('''SELECT mfr, \
                             type, \
                             COUNT(*) AS total, \
                             SUM(calories) as Total_calories
                      FROM cereal \
                      GROUP BY \
                             mfr, \
                             type  ''')
cereal.count()

"""#8 Case When

"""

cereal = spark.sql('''SELECT DISTINCT type
                      FROM cereal ''')
cereal.show()

cereal = spark.sql('''SELECT mfr, \
                             (case
                                   when type = "C" then "A"
                                   else "B" end) as type_new,
                             COUNT(*) AS total, \
                             SUM(calories) as Total_calories
                      FROM cereal \
                      GROUP BY \
                             mfr, \
                             type  ''')
cereal.show()

"""#9 Consultas Avansadas em SQL usando o PySpark"""

df = spark.sql('''
                   SELECT mfr,
                          type,
                          sum(calories) as sum_calories,
                          min(calories) as min_calories,
                          max(calories) as max_calories,
                          avg(calories) as avg_calories,

                          sum(carbo) as sum_carbo,
                          min(carbo) as min_carbo,
                          max(carbo) as max_carbo,
                          avg(carbo) as avg_carbo,

                          sum(vitamins) as sum_vitamins,
                          min(vitamins) as min_vitamins,
                          max(vitamins) as max_vitamins,
                          avg(vitamins) as avg_vitamins,

                          count(distinct name) as count_distinct_name,
                          count(name) as count_names
                   FROM cereal
                   GROUP BY mfr, type
                   ORDER BY mfr, type
                   ''')
df.show()

df = spark.sql('''
                   SELECT mfr,
                          type,
                          sum(calories) as sum_calories,
                          min(calories) as min_calories,
                          max(calories) as max_calories,
                          cast(avg(calories)as decimal(10,2)) as avg_calories,

                          sum(carbo) as sum_carbo,
                          min(carbo) as min_carbo,
                          max(carbo) as max_carbo,
                          cast(avg(carbo)as decimal(10,2)) as avg_carbo,

                          sum(vitamins) as sum_vitamins,
                          min(vitamins) as min_vitamins,
                          max(vitamins) as max_vitamins,
                          cast(avg(vitamins)as decimal(10,2)) as avg_vitamins,

                          count(distinct name) as count_distinct_name,
                          count(name) as count_names
                   FROM cereal
                   GROUP BY mfr, type
                   ORDER BY mfr, type
                   ''')
df.show()

df = spark.sql('''
                   SELECT mfr,
                          type,
                          (case
                               when mfr = "A" then "Abacaxi"
                               when mfr = "G" then "Goiaba"
                               when mfr = "K" then "Banana"
                               when mfr = "N" then "Maça"
                               when mfr = "P" then "Tomate"
                               when mfr = "Q" then "Pera"
                               when mfr = "R" then "Uva"
                               else "NA"
                          end) as Type_fruit,

                          sum(calories) as sum_calories,
                          min(calories) as min_calories,
                          max(calories) as max_calories,
                          cast(avg(calories)as decimal(10,2)) as avg_calories,

                          sum(carbo) as sum_carbo,
                          min(carbo) as min_carbo,
                          max(carbo) as max_carbo,
                          cast(avg(carbo)as decimal(10,2)) as avg_carbo,

                          sum(vitamins) as sum_vitamins,
                          min(vitamins) as min_vitamins,
                          max(vitamins) as max_vitamins,
                          cast(avg(vitamins)as decimal(10,2)) as avg_vitamins,

                          count(distinct name) as count_distinct_name,
                          count(name) as count_names
                   FROM cereal
                   GROUP BY mfr, type
                   ORDER BY mfr, type
                   ''')
df.show()

